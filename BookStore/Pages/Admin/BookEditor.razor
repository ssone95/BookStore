@page "/admin/books/edit/{id:long}"

@page "/admin/books/create"
 
@using BookStore.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Routing
@using BookStore.Infrastructure
@using BookStore.Repository 
@using Microsoft.AspNetCore.Components.Forms 
@using System.Collections.Generic
@using BookStore.Components 

@inherits OwningComponentBase<IStoreRepository>

<style>
    div.validation-message { color: rgb(220, 53, 69); font-weight: 500; }
</style>

<h3 class="bg-@ThemeColor text-white text-center p-1">@TitleText a Book</h3>

<EditForm Model="Book" OnValidSubmit="SaveBook">
    <DataAnnotationsValidator />

    @if (Book.BookId > 0)
    {
        <div class="form-group">
            <label>ID</label>
            <input class="form-control" disabled value="@Book.BookId" />
        </div>
    }

    <div class="form-group">
        <label>Name</label>
        <ValidationMessage For="@(() => Book.Name)" />
        <InputText class="form-control" @bind-Value="Book.Name" />
    </div>

    <div class="form-group">
        <label>Description</label>
        <ValidationMessage For="@(() => Book.Description)" />
        <InputText class="form-control" @bind-Value="Book.Description" />
    </div>

    <div class="form-group">
        <label>Genre</label>
        <ValidationMessage For="@(() => Book.GenreId)" />
        <ExtendedInputSelect class="form-control selectpicker" @bind-Value="Book.GenreId">
            <option value="0">Select a genre</option>
            @if (Genres != null)
            {
                @foreach (var genre in Genres)
                {
                    <option value="@genre.GenreId">@genre.Name</option>
                }
            }
        </ExtendedInputSelect>
    </div>

    <div class="form-group">
        <label>Price</label>
        <ValidationMessage For="@(() => Book.Price)" />
        <InputNumber class="form-control" @bind-Value="Book.Price" />
    </div>

    <button type="submit" class="btn btn-@ThemeColor">Save</button>

    <NavLink class="btn btn-secondary" href="/admin/books">Cancel</NavLink>
</EditForm>

@code {

    [Inject]
    public BookStore.Repository.IStoreRepository Repository { get; set; }

    [Inject]
    public NavigationManager NavManager { get; set; }

    [Parameter]
    public long Id { get; set; }

    public Book Book { get; set; }

    public List<Genre> Genres { get; set; }

    protected override void OnParametersSet()
    {
        if (Id > 0)
            Book = Repository.Books.FirstOrDefault(x => x.BookId == Id);
        else
            Book = new Book();

        Genres = Repository.Genres.ToList();
    }

    public void SaveBook()
    {
        if(Id > 0)
        {
            Repository.SaveBook(Book);
        } else
        {
            Repository.CreateBook(Book);
        }

        NavManager.NavigateTo("/admin/books");
    }

    public string ThemeColor => Id > 0 ? "warning" : "primary";
    public string TitleText => Id > 0 ? "Edit" : "Create";
}
